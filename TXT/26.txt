typescript
	什么是 TypeScript:
	    TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源于 GitHub 上。
	    官网：https://www.tslang.cn
	特点：
	    可以在编译阶段就发现大部分错误，这总比在运行时候出错好
	    不显式的定义类型，也能够自动做出类型推论
	    即使 TypeScript 编译报错，也可以生成 JavaScript 文件
	    Google 开发的 Angular 就是使用 TypeScript 编写的
	    TypeScript 拥抱了 ES6 规范，也支持部分 ES7 草案的规范
	缺点：
	    有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）、枚举类型（Enums）等前端工程师可能不是很熟悉的东西
	    短期可能会增加一些开发成本，多写一些类型的定义，长期维护的项目，TypeScript 能够减少其维护成本
	安装：
	    npm install -g typescript
	编译一个 TypeScript 文件：
	    tsc hello.ts   类型不匹配时，编辑报错，但可以生成js（编辑通过），如果不希望编译通过需要配饰tsconfig.json

	类型：
	    原始数据类型：尔值、数值、字符串、null、undefined、Symbol  void any 
	    内置对象: Boolean Error Date RegExp Math / Document HTMLElement Event NodeList


	    数值、字符串
	    布尔值 let isDone: boolean = false;
	           NewBoolean: boolean = new Boolean(1);返回对象
	           null undefined 同理
	    空值  let unusable: void = undefined
	          function alertName(): void{}
	    注意：undefined 和 null 是所有类型的子类型，可以赋值给 number 类型的变量，而 void 类型的变量不能赋值给 number 类型的变量
	    任意值：any 允许被赋值为任意类型，任何操作都返回任意值
	        let myFavoriteNumber: any = 'seven';
	        myFavoriteNumber = 7;
	    类型推论
	        没有明确的指定类型，依照值推断出一个类型。
	    联合类型
	        取值可以为多种类型中的一种,没列出的不可以
	        let myFavoriteNumber: string | number

	    对象类型：依赖接口来描述,不给类型可以推论
	    接口定义：后续接口会单说
	    	interface Person {
				name: string;
				age: number;
			}
			let p:Person={name:'xx',age:11}
	    注意：定义的变量比接口少了一些属性是不允许
	    可选属性: age?: number;
	    任意属性: [propName: string]: any; 任意值
	    注意：必填属性和可选属性都必须是任意属性的子属性  
	    	  例如：[propName: string]: string  其他属性要是string子属性
	    只读属性: readonly id: number; 只能创建的时候被赋值

	    数组的类型: 
	    变量:类型[]: 
	    	let arr: number[] = [1, 1, 2, 3, 5];
	        let arr: any[] = [1, 1, 2, 3, 5];
	    Array<elemType>:  泛型 后面会单说
	    	let arr: Array<number> = [1, 1, 2, 3, 5];  

		 函数的类型：
		    一个函数有输入和输出，进行约束，需要把输入和输出都考虑到
		    function sum(x: number, y: number): number {}
		    注意：输入多余的（或者少于要求的）参数，是不被允许的
		    函数表达式：let mySum = function (x: number, y: number): number {}
		    	let mySum: (x: number, y: number) => number = function (x: number, y: number): number {}
		    	变量:输入类型=>输出类型=function(参数){}
		    可选参数:   function buildName(a: string, b?: string) {}
		        注意：可选参数在后
		    参数默认值:  lastName: string = 'Liu'
		    接口中函数的定义:
		        interface SearchFunc {
		          (a: string, b: number): boolean;
		        }
		        let c: SearchFunc=function() {return true}
		        c('qq',11)

	类型断言Assertion:
	    绕过编译器的类型推断，手动指定一个值的类型
	    <类型>值   (<string>something).length
	    值 as 类型 (something as string).length
	    注意：类型断言不是类型转换

	 声明文件
	    ts 使用第三方库时，我们需要引用它的声明文件
	    ts 并不知道 $ 或 jQuery 是什么东西
	    declare 关键字来定义它的类型,帮助 TypeScript 判断我们传入的参数类型对不对
		    declare var jQuery: (string) => any;
		    jQuery('#div1');
	    类型声明放到一个单独的文件中，这就是声明文件jQuery.d.ts
	    	declare var jQuery: (string) => any;
	    用到的文件的开头用「三斜线指令」表示引用了声明文件
	    /// <reference path="./jQuery.d.ts" />  

	    安装第三方声明文件
	    npm install @types/jquery --save-dev

	    引入第三方方声明文件
	    import * as jQuery from 'jquery';
	    import * as $ from 'jquery';
	 内置对象
	    Boolean、Error、Date、RegExp,Math
	    let b: Boolean = new Boolean(1);    大驼峰

	    Document、HTMLElement、Event、NodeList
	    let body: HTMLElement = document.body;
	    let allDiv: NodeList = document.querySelectorAll('div');
类: 
		类(Class)：定义了一件事物的抽象特点，包含它的属性和方法
		对象（Object）：类的实例，通过 new 生成
		面向对象（OOP）的三大特性：封装、继承、多态
		封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据

		继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性
			es6:	使用 extends 关键字实现继承，子类中使用 super 关键字来调用父类的构造函数和方法
		存取器（getter & setter）：用以改变属性的读取和赋值行为
			使用 get 属性(){return this._属性} 和 set 属性(val){this._属性=val} 可以改变属性的赋值和读取行为
		静态方法: static 方法名(){}		类名.方法()
		静态属性: 定义在类内部 name = 'Jack'; ts实现了但转换到js暂不支持		调用：类名.方法()

		访问修饰符（Modifiers	ts实现）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法
			 public：修饰的属性或方法是公有的，默认所有的属性和方法都是 public 的
			 private 修饰的属性或方法是私有的，不能在声明它的类的外部访问
			 protected 修饰的属性或方法是私有的+子类中允许访问
		类的类型：
			public name: string;
			constructor(name: string)
			sayHi(): void{}
接口:
		可以用于对象的形状描述，函数的输入输出类型描述，类的行为进行抽象
		思想：实现（implements）不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 implements 关键字来实现
		门是一个类，防盗门是门的子类。防盗门有一个报警器的功能，给防盗门添加一个报警方法。车类，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它

		interface Action{ 定义接口
			readonly id: number;//只读属性
			name:string;
			age?:number;可选
			[propName: string]: any;//任意属性
			eat?():string 可选方法的返回值
		}

		类实现接口：class 类 implements 接口{}
		类实现多个接口：class 类 implements 接口1,接口2{}

泛型:
		在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性

		 function 函数<T>(length: number, value: T): Array<T> {}
		 函数名后添加了 <T>，指代任意输入的类型  value: T 接收任何输入类型  Array<T>输出数组泛形

		 函数<string>(参数) 使用的时候再指定类型


angular 环境搭建
	https://angular.cn
	安装angular的CLI需要NodeJs的环境基础，https://nodejs.org
		Angular CLI 是一个命令行接口(Command Line Interface)，用于实现自动化开发工作流程
		创建一个新的 Angular 应用程序
		运行带有 LiveReload 支持的开发服务器，以便在开发过程中预览应用程序
		添加功能到现有的 Angular 应用程序
		运行应用程序的单元测试
		运行应用程序的端到端 (E2E) 测试
		构建应用程序
	运行：npm install -g @angular/cli，进行angular的CLI安装
		测试： ng version
	angular项目的创建（注意：因为需要安装node_modules，所以会比较慢）
		ng new 目录	-> cd 目录
	运行：ng serve	运行地址为http://localhost:4200
		ng serve --open --port 8001  

项目结构解读
		├── e2e 	end to end端对端测试目录，主要是集成测试
		├── src 	项目源码目录
		│   ├── app 根组件
		│   │   ├── app.component.css 样式
		│   │   ├── app.component.html 模板
		│   │   ├── app.component.spec.ts 单元测试定义
		│   │   ├── app.component.ts 
		│   │   └── app.module.ts 	根模块会告诉Angular如何组装该应用
		│   ├── assets 	资源文件目录
		│   ├── environments 	环境配置目录
		│   ├── favicon.ico
		│   ├── index.html  CLI会自动把所有js和css文件添加进去
		│   ├── main.ts 	应用的主要入口点
		│   ├── polyfills.ts 填充库 兼容检测文件
		│   ├── styles.css 全局样式文件
		│   ├── test.ts 单元测试入口文件
		│   ├── tsconfig.app.json angular 的ts配置
		│   ├── tsconfig.spec.json 测试配置文件
		│   └── typings.d.ts 类型文件配置
		├── tsconfig.json 编译器的配置文件
		└── tslint.json Lint功能代码格式检测 配置 当运行ng lint时会用到
		└── .angular.json CLI的配置文件
		└── .editorconfig 编辑器配置
		└── .gitignore Git的配置文件
		└── .karma.conf.js 给Karma的单元测试配置，运行ng test时会用到它。
		└── protractor.conf.js 端到端测试配置文件，运行ng e2e的时。