typescript
	什么是 TypeScript:
	    TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源于 GitHub 上。
	    官网：https://www.tslang.cn
	特点：
	    可以在编译阶段就发现大部分错误，这总比在运行时候出错好
	    不显式的定义类型，也能够自动做出类型推论
	    即使 TypeScript 编译报错，也可以生成 JavaScript 文件
	    Google 开发的 Angular 就是使用 TypeScript 编写的
	    TypeScript 拥抱了 ES6 规范，也支持部分 ES7 草案的规范
	缺点：
	    有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）、枚举类型（Enums）等前端工程师可能不是很熟悉的东西
	    短期可能会增加一些开发成本，多写一些类型的定义，长期维护的项目，TypeScript 能够减少其维护成本
	安装：
	    npm install -g typescript
	编译一个 TypeScript 文件：
	    tsc hello.ts   类型不匹配时，编辑报错，但可以生成js（编辑通过），如果不希望编译通过需要配饰tsconfig.json

	类型：
	    原始数据类型：尔值、数值、字符串、null、undefined、Symbol  void any 
	    内置对象: Boolean Error Date RegExp Math / Document HTMLElement Event NodeList


	    数值、字符串
	    布尔值 let isDone: boolean = false;
	           NewBoolean: boolean = new Boolean(1);返回对象
	           null undefined 同理
	    空值  let unusable: void = undefined
	          function alertName(): void{}
	    注意：undefined 和 null 是所有类型的子类型，可以赋值给 number 类型的变量，而 void 类型的变量不能赋值给 number 类型的变量
	    任意值：any 允许被赋值为任意类型，任何操作都返回任意值
	        let myFavoriteNumber: any = 'seven';
	        myFavoriteNumber = 7;
	    类型推论
	        没有明确的指定类型，依照值推断出一个类型。
	    联合类型
	        取值可以为多种类型中的一种,没列出的不可以
	        let myFavoriteNumber: string | number

	    对象类型：依赖接口来描述,不给类型可以推论
	    接口定义：后续接口会单说
	    	interface Person {
				name: string;
				age: number;
			}
			let p:Person={name:'xx',age:11}
	    注意：定义的变量比接口少了一些属性是不允许
	    可选属性: age?: number;
	    任意属性: [propName: string]: any; 任意值
	    注意：必填属性和可选属性都必须是任意属性的子属性  
	    	  例如：[propName: string]: string  其他属性要是string子属性
	    只读属性: readonly id: number; 只能创建的时候被赋值

	    数组的类型: 
	    变量:类型[]: 
	    	let arr: number[] = [1, 1, 2, 3, 5];
	        let arr: any[] = [1, 1, 2, 3, 5];
	    Array<elemType>:  泛型 后面会单说
	    	let arr: Array<number> = [1, 1, 2, 3, 5];  

		 函数的类型：
		    一个函数有输入和输出，进行约束，需要把输入和输出都考虑到
		    function sum(x: number, y: number): number {}
		    注意：输入多余的（或者少于要求的）参数，是不被允许的
		    函数表达式：let mySum = function (x: number, y: number): number {}
		    	let mySum: (x: number, y: number) => number = function (x: number, y: number): number {}
		    	变量:输入类型=>输出类型=function(参数){}
		    可选参数:   function buildName(a: string, b?: string) {}
		        注意：可选参数在后
		    参数默认值:  lastName: string = 'Liu'
		    接口中函数的定义:
		        interface SearchFunc {
		          (a: string, b: number): boolean;
		        }
		        let c: SearchFunc=function() {return true}
		        c('qq',11)

	类型断言Assertion:
	    绕过编译器的类型推断，手动指定一个值的类型
	    <类型>值   (<string>something).length
	    值 as 类型 (something as string).length
	    注意：类型断言不是类型转换

	 声明文件
	    ts 使用第三方库时，我们需要引用它的声明文件
	    ts 并不知道 $ 或 jQuery 是什么东西
	    declare 关键字来定义它的类型,帮助 TypeScript 判断我们传入的参数类型对不对
		    declare var jQuery: (string) => any;
		    jQuery('#div1');
	    类型声明放到一个单独的文件中，这就是声明文件jQuery.d.ts
	    	declare var jQuery: (string) => any;
	    用到的文件的开头用「三斜线指令」表示引用了声明文件
	    /// <reference path="./jQuery.d.ts" />  

	    安装第三方声明文件
	    npm install @types/jquery --save-dev

	    引入第三方方声明文件
	    import * as jQuery from 'jquery';
	    import * as $ from 'jquery';
	 内置对象
	    Boolean、Error、Date、RegExp,Math
	    let b: Boolean = new Boolean(1);    大驼峰

	    Document、HTMLElement、Event、NodeList
	    let body: HTMLElement = document.body;
	    let allDiv: NodeList = document.querySelectorAll('div');
类: 
		类(Class)：定义了一件事物的抽象特点，包含它的属性和方法
		对象（Object）：类的实例，通过 new 生成
		面向对象（OOP）的三大特性：封装、继承、多态
		封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据

		继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性
			es6:	使用 extends 关键字实现继承，子类中使用 super 关键字来调用父类的构造函数和方法
		存取器（getter & setter）：用以改变属性的读取和赋值行为
			使用 get 属性(){return this._属性} 和 set 属性(val){this._属性=val} 可以改变属性的赋值和读取行为
		静态方法: static 方法名(){}		类名.方法()
		静态属性: 定义在类内部 name = 'Jack'; ts实现了但转换到js暂不支持		调用：类名.方法()

		访问修饰符（Modifiers	ts实现）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法
			 public：修饰的属性或方法是公有的，默认所有的属性和方法都是 public 的
			 private 修饰的属性或方法是私有的，不能在声明它的类的外部访问
			 protected 修饰的属性或方法是私有的+子类中允许访问
		类的类型：
			public name: string;
			constructor(name: string)
			sayHi(): void{}
接口:
		可以用于对象的形状描述，函数的输入输出类型描述，类的行为进行抽象
		思想：实现（implements）不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 implements 关键字来实现
		门是一个类，防盗门是门的子类。防盗门有一个报警器的功能，给防盗门添加一个报警方法。车类，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它

		interface Action{ 定义接口
			readonly id: number;//只读属性
			name:string;
			age?:number;可选
			[propName: string]: any;//任意属性
			eat?():string 可选方法的返回值
		}

		类实现接口：class 类 implements 接口{}
		类实现多个接口：class 类 implements 接口1,接口2{}

泛型:
		在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性

		 function 函数<T>(length: number, value: T): Array<T> {}
		 函数名后添加了 <T>，指代任意输入的类型  value: T 接收任何输入类型  Array<T>输出数组泛形

		 函数<string>(参数) 使用的时候再指定类型


angular 环境搭建
	https://angular.cn
	安装angular的CLI需要NodeJs的环境基础，https://nodejs.org
		Angular CLI 是一个命令行接口(Command Line Interface)，用于实现自动化开发工作流程
		创建一个新的 Angular 应用程序
		运行带有 LiveReload 支持的开发服务器，以便在开发过程中预览应用程序
		添加功能到现有的 Angular 应用程序
		运行应用程序的单元测试
		运行应用程序的端到端 (E2E) 测试
		构建应用程序
	运行：npm install -g @angular/cli，进行angular的CLI安装
		测试： ng version
	angular项目的创建（注意：因为需要安装node_modules，所以会比较慢）
		ng new 目录	-> cd 目录
	运行：ng serve	运行地址为http://localhost:4200
		ng serve --open --port 8001  

项目结构解读
		├── e2e 	end to end端对端测试目录，主要是集成测试
		├── src 	项目源码目录
		│   ├── app 根组件
		│   │   ├── app.component.css 样式
		│   │   ├── app.component.html 模板
		│   │   ├── app.component.spec.ts 单元测试定义
		│   │   ├── app.component.ts 
		│   │   └── app.module.ts 	根模块会告诉Angular如何组装该应用
		│   ├── assets 	资源文件目录
		│   ├── environments 	环境配置目录
		│   ├── favicon.ico
		│   ├── index.html  CLI会自动把所有js和css文件添加进去
		│   ├── main.ts 	应用的主要入口点
		│   ├── polyfills.ts 填充库 兼容检测文件
		│   ├── styles.css 全局样式文件
		│   ├── test.ts 单元测试入口文件
		│   ├── tsconfig.app.json angular 的ts配置
		│   ├── tsconfig.spec.json 测试配置文件
		│   └── typings.d.ts 类型文件配置
		├── tsconfig.json 编译器的配置文件
		└── tslint.json Lint功能代码格式检测 配置 当运行ng lint时会用到
		└── .angular.json CLI的配置文件
		└── .editorconfig 编辑器配置
		└── .gitignore Git的配置文件
		└── .karma.conf.js 给Karma的单元测试配置，运行ng test时会用到它。
		└── protractor.conf.js 端到端测试配置文件，运行ng e2e的时。

app.module
		模块:Angular 应用至少有一个模块（根模块），习惯上命名为AppModule,无论是根模块还是特性模块）都是一个带有@NgModule装饰器的类

		每个 Angular 库的名字都带有@angular前缀
		import { Component } from '@angular/core';	这是一个js模块系统

		@NgModule装饰器 把一个类装饰成模块，内部参数叫做元数据(metadata)
			imports:  导入其他模块，使用其他angular模块，必须导入
			declarations：声明本模块包含的内容(所有组件|指令|管道要放到此处<强制>)
			exports：外部可见的内容
			providers：服务提供者(系统服务，自定义服务)
			bootstrap：启动模块。只在根模块使用。在除了根模块以外的其他模块不能使用
			...
	app.component 
		@Component装饰器 
			将类标记为组件，提供额外的元数据，内部参数叫做元数据(metadata)
			selector: 模板中使用时的 组件名 
		    templateUrl: 组件模板地址
		    styleUrls: 组件样式地址
		    ...
		模板：
		以 HTML 形式存在，告诉 Angular 如何渲染组件，可以使用模板语法，指令，套用其他模板
		https://angular.cn/generated/images/guide/architecture/component-tree.png

		组件：

		组件负责控制屏幕上的一小块区域，我们称之为视图，在类中定义组件的应用逻辑，为视图提供支持。 组件通过一些由属性和方法组成的 API 与视图交互。
		组件充当了“控制器 (controller) ”和“视图模型 (view model) ”的角色

		元数据(metadata)：
		告诉 Angular如何处理一个普通类,出现在装饰器里面，装饰器把紧随其后的类标记成了组件类

		装饰器（decorator | decoration）
		装饰器是一个函数，它将元数据添加到类、类成员（属性、方法）和函数参数

	cli 创建组件/指令/服务/管道
		ng generate component 组件名
		ng g c 组件名 
		ng g c /xx/组件名 --
		ng g d|s|p| xx
	导入第三方库（bootstrap)
		npm install bootstrap -D   
		修改: .angular-cli.json 
			style项: "../node_modules/xx/../bootstrap.css"
			scripts项: jquery/popper/popper/bootstrap
		注意: bootstrap4 目前没有js配对的模块安装，需要src方式在index引入
			  npm i bootstrap@4.0.0-beta -D  单数版本有问题
======================================================================
架构 <阅读理解>
	https://angular.cn/generated/images/guide/architecture/overview2.png
	
	angular编写流程:	
		用 Angular 扩展语法编写 HTML 模板， 
		用组件类管理这些模板，
		用服务添加应用逻辑， 
		用模块打包发布组件与服务
		引导根模块来启动该应用
		Angular浏览器中接管、展现应用的内容，根据我们提供的操作指令响应用户的交互

数据绑定:
	
	本地数据M：
		变量定义数据 public msg1:string='bmw'; 
		
		构造函数定义数据 constructor(){this.msg1='qq';}	

	数据展示V： {{hero.name}}	插值表达式
			   src="{{http://via.placeholder.com/350x150}}" 插值表达式 == DOM属性绑定
			   [src]="selectedHero" DOM属性绑定
			   bind-src="selectedHero" DOM属性绑定

			   [attr.HTML属性]="数据" [attr.colspan]="数据"
			   	当元素没有DOM属性可绑的时候，就必须使用 attribute 绑定
				 [innerHTML]="数据" 非转义输出，样式无效??
	列表渲染
			   *ngFor="let val of 数据; let i=index; trackBy:i"    {{val}}{{i}} 	
			   *ngFor="let item of 数据; index as i;trackBy:i"    {{val}}{{i}}{{item.id}}	
			   *ngFor="let item of 数据;trackBy:item?.id"    	{{val}}{{item.id}} 	
		嵌套:	
			*ngFor="let item of 数据;trackBy:item?.id" 
				*ngFor="let item2 of 数据.key;trackBy:item2?.id" 
	ts 类 描述组件数据模型V	***
				public 属性:类名[]=[{},{}]
				export class 类名{属性:类型值;..;..}

				public 属性:类名[]=[new 类名(属性,xx,xx),{}]
				export class 类名{constructor(属性:类型,xx,xx)}
	条件渲染		   
			   *ngIf="数据"

	样式绑定：
		[class]="数据"
		[class.类名]="布尔值" 是否使用某个类
		[style.css属性-子属性]="数据"	中杠 和 驼峰命名都可以
		[style.css属性-子属性.单位]="数据"

	事件绑定:
		(事件名)="方法名()"
		on-事件名="方法名()"
		on-事件名="方法名($event,参数)"   方法名(ev,arg1)
			ev.target.value 元素的当前内容  
			<input #box (keyup)="onKey(box.value)">  模板变量（本地属性）传递 √ 无需了解$event结构
		按键事件过滤：keyup.enter
			<input #box (keyup.enter)="onEnter(box.value)">
	模板(引用)变量 ( #var 本地属性)
		引用模板中的某个DOM元素，组件或指令,一次引用，在当前模板中处处可用
		<input #phone placeholder="phone number">  phone == dom 元素
		<input ref-phone placeholder="phone number">  phone == dom 元素
		ts里面拿到模板变量对象：@ViewChild('变量名') 属性名：ElementRef
	双向数据绑定:
		[(ngModel)]="数据"	根模块需要引入（imports） FormsModule 并添加到imports列表
	单向数据绑定:
		[value]="数据" (input)="xx($event)"

组件通讯：

	父到子：输入属性	松耦合√
		父模板 <子 [属性名]="父数据" 
		子类 @Component 添加 inputs:['属性名'] 
			或者 子类：@Input() 实例属性:string;
		子模板：直接使用数据
		注意：构造函数中是获取不到输入属性的值
			  修改输入属性，不影响父数据，输入属性数据单项流动
			  尽量通过 @Input 定义无状态的组件，大大提高组件复用

	子到父：输出属性+EventEmitter
		父模板：(toParent)="getChild($event)"	getChild(data) 接收
		子类 
			1. @Output() toParent = new EventEmitter()
			2. @Component outputs: ['toParent']  类内 toParent = new EventEmitter();
			传递：this.toParent.emit(子属性) 传递给父 
		注意：子ngOnInit里面发送数据

	平级： 子A 到父 -> 父-> 子B  父==中间人模式  同级传递 √

	@ViewChild()	父类中获取子组件   紧耦合
		父 			  
			子组件：<child  #childInfo></..>
			<标签>{{childInfo.子属性}}</..>
			<标签 (click)="childInfo.子方法()"></..>
			问题：模板变量（本地属性）只能在模板中使用
			解决:类中使用需要@viewChild
				父组件引入子组件&&引入ViewChild from core
				@viewChild(模板变量名) 属性：子组件

	ng-content 投影	***
		父组件的HTML片段投影到子组件内部（vue的slot）
		父：<子 class="类名">片段中可携带父属性|方法</..>
		子：<ng-content select=".类名">
		注意：类名样式在父组件中有效

指令
	指令是一个 Angular 类，负责创建和重塑浏览器 DOM ，并互动
		结构型指令： 添加、移除和替换元素来修改布局	如	*ngFor  *ngIf 	
		属性型指令： 修改一个现有元素的外观或行为 [(ngModel)]
		自定义指令： 自定义组件/指令
			组件 — 拥有模板的指令
			指令: 结构、属性

			<app-child-a>  元素型指令(组件)
			<div class="指令"></xx>
			<div 指属性型令="值"></xx>
			<!-- directive:app-child-b -->

	结构型指令
		*ngFor="let val of 数据"
		*ngFor="let val of 数据; let i=index | index as i;trackBy:index"    {{val}}{{i}}
		*ngIf="数据"
	属性型指令 
		 [ngClass]="{key:bl}"
		 [ngStyle]="{background-color:value}"
		 <ng-template [ngIf]="bl"></ng-template> 
		 	只声明逻辑，不具备含义，类似小程序的block
		 	结构指令都是ng-template里面的属性指令 *ngIf -> [ngIf]
		 	转换后的结构指令不可以用在ng-template之外的元素
	自定义属性指令 
		ng g d /directive/color -spec false
		属性指令： @Directive() 
			使用： <xx appRed></xx>
			定义： app-red.directive.ts
				   @Directive({
				   	selector:'[appRed]'
				   }) 
				   export class appRedDirective {
				   	constructor(el:ElementRef){//注入到指令构造函数访问 DOM 元素
				   		el.nativeElement.style.background='red';
				   	}
				   }
			根模块配置：declarations:[appRedDirective]
			给属性指令传参： <xx [appColor]="'red'"></xx>
				@Input() appColor:string;
			事件监听装饰器 @HostListener('mouseenter') onmouseenter(){} 
			样式绑定装饰器 @HostBinding('class.xxx') isOpen = false 
				给使用指令的dom 元素绑定一个xxx样式，根据数据isOpen的状态来切换

管道（过滤器）

	管道是一个带有“管道元数据(pipe metadata)”装饰器的类。
	管道类实现了PipeTransform接口的transform方法，该方法接受一个输入值和一些可选参数，并返回转换后的值。
	@Pipe装饰器允许我们定义管道的名字，这个名字会被用在模板表达式中

	{{数据|管道名:'参数1':参数2}}
	number:		{{3.1|number:'2.2-4'}}  
				整数位.小数位-区间,位数不够补零,整数位超出无效，小数超出进位
				默认:默认有千分位，保留3位小数，四舍五入
	currency:	5.4 | currency  默认美元，保留两位
				5.4 | currency:'CNY/JPY/USD/自定义':'symbol-narrow':'2.2-4' 
	json: 		{{ {a:1,b:2} }} | json -> {"a":1,"b":2}
	date:		{{日期对象数据|date}} | 'yyyy-mm-dd HH:mm a z':'+0900'  z==时区 0900指定了时区
	slice：		<tr *ngFor="let movie of movies | slice:0:2"> 限定数量 起始索引0 结束位2
	uppercase/lowercase
	链式管道:	{{ birthday | date | uppercase}}
	percent:	0.259 | percent  -> 26%

	纯管道（数据转换）：其他
	非纯管道（数据类型变更）：slice（切割了） json（obj-》str）
	自定义管道: ng g p 管道名 -spec false
	例子：cn-day.pipe.ts
		@Pipe({name: '管道名'})
		class 类 implements PipeTransform {
			transform(数据,参数){
				return 处理后的值
			}
		}
	自定义管道必须在AppModule的declarations数组中声明，内置管道都已经预注册过了


生命周期:
	属性生成期-》组件渲染期-》组件销毁
				 变化检测
		  (changes check checked)
	组件渲染流程：
		组件(content)->视图(view)
		子结束了轮到父
		父组件->子组件->子视图->父视图
		
	属性生成期
		constructor - 在所有的钩子之前调用，
			场景：依赖注入或执行简单的数据初始化
			private ele: ElementRef		this.ipt = 'bmw';
			获取不到输入属性
		ngOnChanges - 组件输入属性变化时(不可变对象：基本类型)
			注意： 输入属性是可变对象（Object）不会触发ngOnChanges，要是不可变对象（基本类型)
			ngOnChanges(data:SimpleChanges) {获得一个 SimpleChanges 对象，包含绑定属性的新值和旧值}
			获取的到输入属性,写给子组件

		ngOnInit - 初始化组件时，只调用一次
			场景：组件依赖输入属性的值时使用
		ngDoCheck - 检测变化
			场景：用于检测和处理值的改变，事件也会触发，会频繁触发，代码要求高效

	组件渲染期间
		ngAfterContentInit - 组件初始化后调用一次 
			可以修改组件属性,未到视图
		ngAfterContentChecked - 组件更新时调用,多次 
			检测ng-content 指令外部内容绑定或变化的
			未到视图
		ngAfterViewInit - 视图初始化后,调用一次	
			场景：检测 @ViewChild 或 @ViewChildren 属性装饰器查询的视图元素 ***
			注意：不可同步修改组件属性，可异步
		ngAfterViewChecked - 视图更新时 调用，多次
	组件销毁时
		ngOnDestroy - 指令销毁前调用
	总流程:
		父changes->父init->父DoCheck->父ContentInit->父ContentChecked->(子走一套)->父viewInit->父ViewChecked

数据请求(httpClient)	
	基于浏览器提供的XMLHttpRequest接口,可以和支持http[s]和websocket服务通讯
	可测试性、强类型的请求和响应对象、发起请求与接收响应时的拦截器支持
	更好的、基于可观察（Observable）对象的错误处理机制
	1. 引入 import {HttpClientModule} from '@angular/common/http'
	2.	@NgModule->imports-> 导入到模块  HttpClientModule
	3.	组件内部 构造器里面注入HttpClient类 
		private http: HttpClient
		this.http.get('/assets/api/items.json') 返回observe对象（流）
			可观察对象 (observable)
			帮助我们管理异步数据，例如来自后台服务的数据，Angular 的事件系统和它的 http 客户端服务
		订阅：observe对象.subscribe(data=>data == 数据,err=>err==失败对象)
		注意：subscribe 是订阅，导致了数据请求发送，而不是get
	4.	抓取成功响应体（HttpResponse）
		this.http.get('...',{observe:'response'}) 订阅返回的data==HttpResponse
	5.	php访问
		this.http.get|post(url:string,postData:xx,{配置})
		postData: new HttpParams().set('a','11').set('b','2'), //数据
		配置:
			observe: 'response'	抓取成功响应体
			responseType: 'arraybuffer'|'blob'|'json'|'text' 返回类型设置
			withCredentials: boolean 
			reportProgress: boolean, 是否报告进度
			params:new HttpParams().set('a','1').set('b','2')//参数传递 
			headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded') 头信息
	6. jsonp	import {HttpClientJsonpModule} from '@angular/common/http'
		this.http.jsonp('url?key=val','cb').subscribe(data=>console.log(data));
	7. HttpClient不知道响应体应该是什么类型
	   解决：定义一个接口来描述数据类型
	   interface xx{key:类型,key2:类型}

---------------------------------------

路由:
	让用户从一个视图导航到另一个视图
	1. 	index.html 	<base href="/">
	2.	app.module.ts 中 导入 import { RouterModule, Routes } from '@angular/router';
		Routes 路由配置 是个数组 RouterModule: 路由模块
	3.	路由配置
		const routes:Routes=[
		  {path:'home',component:HomeComponent},
		  {
		    children:[ 子路由
		      {path:'detail/:id',component:DetailComponent},
		    ]
		  }
		  {path:'',redirectTo:'/home',pathMatch:'full'},//路由  跳转
		  	为字符串默认为前缀匹配 "prefix"; "full" 为完全匹配。
		  {path:'**',component:ErrorComponent}
		];
	4. 注册路由
		@NgModule->imports->RouterModule.forRoot(routes,{enableTracing:false})//注册路由
			enableTracing 是否监听路由
	5. 调用路由
		<a class="nav-link" routerLink="/home" routerLinkActive="active">首页</a>
		
		<router-outlet>展示区2</router-outlet>
	6. 传参
		routerLink="./detail/001"
		[routerLink]="['./detail','001']" [queryParams]="{a:1,b:2}"
		接参数： 导入当前路由服务 ActivatedRoute ，注入到构造函数
			参数快照：constructor(private route:ActivatedRoute)
				  this.route.snapshot.params  保存的id是初始值，组件不好复用
			参数订阅(observe检测)： 可导向路由自身
				this.route.params.subscribe((params:Params)=>{console.log(params)}); 接参数
				this.route.queryParams.subscribe((params:Params)=>{console.log(params)}); 接数据
	7. 路由跳转
		导入Router，注入到构造函数 constructor(private router:Router)
		this.router.navigate(['news/detail', 参数],{queryParams:{a:1,b:2}}); navigate == 根级路由跳转
		回退到上一级路由？？window.history.go(-1);
		子路由显示默认页news：
			this.router.navigate(['/news/detail','001'])
	x.	路由模块剥离
		创建路由模块 app-routing.module.ts 
		ng g m ./app-routing -spec false
		转移：RouterModule, Routes路由配置部分->app-routing
			  根模块保留组件的导入和声明，imports-> AppRoutingModule 引入路由配置模块
			  路由模块exports:[RouterModule] 
	8.	辅助路由(多视图) 允许定义多个插座	
		辅助插座：<router-outlet name="view2"> 
		配置插座：{path:'chat',component:ChatComponent,outlet:'view2'} 
		导航：<a [routerLink]="[{outlets:{primary:'home',插座名:'chat'}}]" 
			  指定主插座显示home路径对应组件，辅助插座显示chat路径对应组件
	9.	路由守卫(钩子) 满足条件才可进入或离开	
		CanActivate 	处理进入 异步promise fetch
			创建守卫类：ng g cl ./guard/user -spec false
			实现 CanActivate 接口，钩子canActivate(){return 布尔  | return fetch(return 布尔)}
			路由配置：
			{path:'',component:'',canActivate:[守卫类,守卫类2]} 可以多个守卫
			NgModule->providers:[守卫类]  类需要实例化、依赖注入实现
			constructor(private router:Router) 需要 @Injectable()
				this.router.navigate(['/login']);
		Resolve
			进入之前获取数据 A路由导向B路由之前，由守卫类负责拦截并加载数据后再返回给B组件
			守卫类：export 守卫类 implements Resolve<要返回的数据类型>
					钩子resolve(){return 数据|return fetch(数据)}|return Observable<object>
			路由配置：{path:'',component:'',resolve:{自定参数:守卫类}} 可以多个守卫
					  NgModule->providers:[守卫类]  实例化、实现
			B组件接收数据：ActivatedRoute.data.subscribe((data:{自定参数})=>{data.自定参数})

		CanDeactivate  处理离开
			守卫类：export 守卫类 implements CanDeactivate<要守卫的组件类>
					钩子canDeactivate(component:要守卫的组件类){return 布尔 确定是否允许离开}
			路由配置：{path:'',component:'',canDeactivate:[守卫类,守卫类2]} 可以多个守卫
					  NgModule->providers:[守卫类]  实例化、依赖注入实现
		
服务 与 依赖注入 	
	服务：给组件使用的公共部分代码，组件为数据绑定提供属性和方法，把其它琐事都委托给服务，多个组件用到同一个逻辑时，就是一个服务，应用逻辑拆分到服务，并通过依赖注入来在组件中使用这些服务
	依赖注入(Dependency injection)：
		给组件注入所需服务，Angular 通过查看构造函数的参数类型得知组件需要哪些服务，渗透在整个 Angular 框架中，被到处使用，注入器 (injector) 是本机制的核心
	1.	定义服务	ng g service 服务名 | ng g s 目录/服务名
		Injectable 标识当前服务的构造器可以注入其他服务，没有就不能服务中使用服务
	2.	注册服务  根组件使用就注册到根，其他组件使用就注册到组件内
		providers: [服务名] 提供器
		提供器的作用域：
			NgModule中注册服务：被整个应用访问，所有组件可注入 √
			组件中注册：该组件及其子组件中可注入
	3.	注入服务（到组件) 注入器
		constructor(变量名: 服务类) {this变量名.方法()}