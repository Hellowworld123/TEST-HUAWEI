组件：
	Vue根实例表示1个应用，一个应用有若干个组件拼装而成

使用组件:  指令形<div v-指令>  /  样式 <div class="样式"> / 元素 <元素> / 注释形 <!-- 组件名 --> 
	<组件名></组件名>
定义组件
	定义:
		a) 	  let 组件变量名= Vue.extend({
		        template:'<div class="header">我是header组件</div>'
		      });
		b)	 let 组件变量名={};		√
	注册(拼装)
		a)	Vue.component('组件名',组件变量名);
		b)	选项
			components:{
				组件名：组件变量名	√
			}
组件数据
	data 要是个函数，且要有返回值 object
模板：
	组件内部: template: #id名
	<tempate id='id名'...

组件（单文件)
	script + template + style

--------------------------------------------------------
组件数据流动/数据传递/通讯
	
	父->子  属性(props)		√
		<子 :自定义属性="父数据"></..>
		子组件:
			选项
			props:['自定义属性']   props:{自定义属性:{type/default/required/...}}
		展示:	子模板	{{自定义属性}}
	子->父  事件(自定义)
		<子 @自定义事件="父方法"></..>
		子:		this.$emit('自定义事件',子.数据名) 
		父:		methods-> 父方法(接受数据){处理}
--------------------------------------------------------
ref属性:

		父子之间共享数据和方法
		<子 ref="自定义子名称"></..>

		父访问子:	this.$refs.自定义子名称.数据名/方法()
		子访问父:	this.$parent.数据名/方法()
--------------------------------------------------------

组件通讯:
		a)   A -> A父VM  ->  子B    A B 要有共同父
		b)   订阅发布模式（pubsub）
		c) 	 web存储(cookie,localstroge/seession)
		d) 	 存库
		e)   状态管理
		
--------------------------------------------------------
动态组件:
	动态组件： 组件动态化(数据化)
	<component is="'组件名'"></component>
	<component :is="数据"></component>

内容分发
	template:	slot 组件槽位  <slot 属性：name=槽名
	<组件名><标签 slot="槽名">内容</..</...
--------------------------------------------------------